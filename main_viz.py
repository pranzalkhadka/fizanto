import os
from dotenv import load_dotenv
import pandas as pd
import ast
from groq import Groq
from io import StringIO
import sys
import requests


load_dotenv()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
ATTACHMENT_DIR = "/app/attachments"
OUTPUT_DIR = "/app/output"

client = Groq(api_key=GROQ_API_KEY)

def get_csv_metadata(file_path: str) -> dict:
    try:
        df = pd.read_csv(file_path, encoding='utf-8')
        metadata = {
            "columns": list(df.columns),
            "dtypes": {col: str(dtype) for col, dtype in df.dtypes.items()},
            "shape": df.shape
        }
        return metadata
    except Exception as e:
        raise Exception(f"Failed to read CSV: {str(e)}")

def generate_visualization_code(metadata: dict, csv_path: str, output_path: str) -> str:
    system_prompt = "You are a data visualization expert that generates valid Python code for matplotlib visualizations."
    vis_prompt = f"""
    Given the following CSV metadata, generate Python code to create visualizations using matplotlib.

    Metadata:
    - Columns: {metadata['columns']}
    - Data types: {metadata['dtypes']}
    - Shape: {metadata['shape']}

    Requirements:
    1. Import pandas as pd and matplotlib.pyplot as plt.
    2. Load the CSV using pd.read_csv('{csv_path}', encoding='utf-8').
    3. Create visualizations:
       - For numeric columns (float64, int64), generate histograms.
       - For categorical columns (object), generate bar plots of value counts.
    4. Save the plot to '{output_path}' using plt.savefig().
    5. Do not call plt.show().
    6. Return only valid Python code with correct indentation and complete syntax. Do not include comments, explanations, markdown, backticks, or incomplete statements.
    7. Ensure the plot is clear with titles, labels, and legends where applicable.
    8. Ensure all print statements have closing parentheses and there are no extra parentheses.

    Example Code:
    import pandas as pd
    import matplotlib.pyplot as plt
    df = pd.read_csv('{csv_path}', encoding='utf-8')
    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
    categorical_cols = df.select_dtypes(include=['object']).columns
    plt.figure(figsize=(10, 6))
    for i, col in enumerate(numeric_cols, 1):
        plt.subplot(len(numeric_cols), 1, i)
        plt.hist(df[col], bins=30, edgecolor='black')
        plt.title(f'Histogram of col')
        plt.xlabel(col)
        plt.ylabel('Frequency')
    plt.tight_layout()
    if len(categorical_cols) > 0:
        plt.figure(figsize=(10, 6))
        df[categorical_cols[0]].value_counts().plot(kind='bar')
        plt.title(f'Bar Plot of categorical_cols[0]')
        plt.xlabel(categorical_cols[0])
        plt.ylabel('Count')
    plt.savefig('{output_path}')
    plt.close()
    """
    try:
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": vis_prompt},
            ]
        )
        code = response.choices[0].message.content.strip()
        # Clean the response to remove markdown and explanatory text
        code_lines = code.split('\n')
        cleaned_code = []
        in_code_block = False
        for line in code_lines:
            if line.strip().startswith('```'):
                in_code_block = not in_code_block
                continue
            if in_code_block or not line.strip().startswith(('Here is', 'This code')):
                cleaned_code.append(line)
        cleaned_code = '\n'.join(cleaned_code).strip()
        # Validate the generated code
        ast.parse(cleaned_code)
        return cleaned_code
    except SyntaxError as e:
        print(f"Invalid code generated by Groq:\n{cleaned_code}\nSyntax Error: {str(e)}")
        raise Exception(f"Generated code is invalid: {str(e)}")
    except Exception as e:
        raise Exception(f"Failed to generate visualization code: {str(e)}")

def visualize_csv(csv_path: str) -> str:
    try:
        metadata = get_csv_metadata(csv_path)
        csv_filename = os.path.basename(csv_path)
        output_path = os.path.join(OUTPUT_DIR, f"visualization_{csv_filename.replace('.csv', '')}.png")
        vis_code = generate_visualization_code(metadata, csv_path, output_path)
        exec(vis_code)
        return output_path
    except Exception as e:
        return f"Error generating visualization: {str(e)}"

def main():
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        response = requests.post("http://host.docker.internal:8000/process-email")
        response.raise_for_status()
        data = response.json()
        if data["status"] != "success":
            print("No unread emails or email processing failed.")
            return
        saved_files = data.get("saved_files", [])
        if not saved_files:
            print("No CSV attachments found.")
            return
        for csv_path in saved_files:
            csv_path = os.path.join(ATTACHMENT_DIR, os.path.basename(csv_path))
            if not os.path.exists(csv_path):
                print(f"File {csv_path} not found.")
                continue
            output_path = visualize_csv(csv_path)
            if "Error generating visualization" in output_path:
                print(f"Failed to visualize")
                continue
            print(f"Visualization saved to {output_path}")

    except Exception as e:
        print(f"Error processing email or CSV: {str(e)}")

if __name__ == "__main__":
    main()